version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:16-alpine
    container_name: pilotpros-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-pilotpros_db}
      POSTGRES_USER: ${DB_USER:-pilotpros_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - pilotpros-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pilotpros_user} -d ${DB_NAME:-pilotpros_db}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # n8n Workflow Engine (Production)
  n8n:
    image: n8n/n8n:latest
    container_name: pilotpros-n8n-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # PostgreSQL Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${DB_NAME:-pilotpros_db}
      DB_POSTGRESDB_USER: ${DB_USER:-pilotpros_user}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
      DB_POSTGRESDB_SCHEMA: n8n
      DB_POSTGRESDB_POOL_SIZE: 20
      DB_POSTGRESDB_SSL_MODE: disable
      
      # n8n Server Configuration
      N8N_PORT: 5678
      N8N_HOST: 0.0.0.0
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_ADMIN_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_ADMIN_PASSWORD}
      
      # Webhooks (Production)
      WEBHOOK_URL: ${FRONTEND_URL}/webhook
      N8N_PAYLOAD_SIZE_MAX: 16
      
      # Performance (Production)
      EXECUTIONS_TIMEOUT: 300
      EXECUTIONS_TIMEOUT_MAX: 3600
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: none
      EXECUTIONS_DATA_MAX_AGE: 336
      
      # Features
      N8N_METRICS: true
      N8N_LOG_LEVEL: warn
      N8N_LOG_OUTPUT: file
      
      # Privacy (Production)
      N8N_DIAGNOSTICS_ENABLED: false
      N8N_VERSION_NOTIFICATIONS_ENABLED: false
      N8N_ANONYMOUS_TELEMETRY: false
      N8N_PERSONALIZATION_ENABLED: false
      
      # Security (Production)
      N8N_SECURE_COOKIE: true
      N8N_COOKIE_SAME_SITE: strict
      
      # Binary Data
      N8N_DEFAULT_BINARY_DATA_MODE: filesystem
      
      # UI
      N8N_HIDE_USAGE_PAGE: true
      N8N_TEMPLATES_ENABLED: false
      
      # Task Runners
      N8N_RUNNERS_ENABLED: true
      
    volumes:
      - n8n_data_prod:/home/node/.n8n
      - ./logs/n8n:/var/log/n8n
    networks:
      - pilotpros-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Ollama AI Service (Optional for Business Intelligence)
  ollama:
    image: ollama/ollama:latest
    container_name: pilotpros-ollama-prod
    restart: unless-stopped
    volumes:
      - ollama_data_prod:/root/.ollama
    networks:
      - pilotpros-network
    healthcheck:
      test: ["CMD-SHELL", "ollama list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API (Production)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
      args:
        NODE_ENV: production
    container_name: pilotpros-backend-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      n8n:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3001}
      HOST: 0.0.0.0
      FRONTEND_URL: ${FRONTEND_URL}
      
      # PostgreSQL Connection
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-pilotpros_db}
      DB_USER: ${DB_USER:-pilotpros_user}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # n8n Integration
      N8N_URL: http://n8n:5678
      N8N_ADMIN_USER: ${N8N_ADMIN_USER:-admin}
      N8N_ADMIN_PASSWORD: ${N8N_ADMIN_PASSWORD}
      
      # Ollama Configuration
      OLLAMA_URL: http://ollama:11434
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: ${LOG_FILE:-/app/logs/backend.log}
      
    volumes:
      - ./logs/backend:/app/logs
    networks:
      - pilotpros-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Frontend (Production Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.prod.Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_APP_NAME: ${COMPANY_NAME:-PilotProOS}
    container_name: pilotpros-frontend-prod
    restart: unless-stopped
    networks:
      - pilotpros-network

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: pilotpros-nginx-prod
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
      - ./logs/nginx:/var/log/nginx
    networks:
      - pilotpros-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  pilotpros-network:
    driver: bridge

volumes:
  postgres_data_prod:
    driver: local
  n8n_data_prod:
    driver: local
  ollama_data_prod:
    driver: local