/**
 * Agent Detail Modal
 * 
 * Modal per drill-down completo su execution AI agent
 * - Timeline step-by-step dell'agent
 * - Input/output di ogni nodo
 * - Business context dettagliato
 * - Raw execution data per debugging
 */

import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { 
  X, Clock, CheckCircle, XCircle, Bot, Mail, ExternalLink,
  ChevronDown, ChevronRight, Code, Database, Activity,
  AlertTriangle, Info, Settings, Zap, Send, RefreshCw
} from 'lucide-react';
import { tenantAPI } from '../../services/api';

// Tipi per execution details
interface AgentStep {
  nodeId: string;
  nodeName: string;
  type: 'input' | 'processing' | 'output' | 'error';
  startTime: string;
  duration: number;
  input: any;
  output: any;
  summary: string;
  details?: string;
  isVisible?: boolean; // Campo per filtro whitelist
}

interface AgentExecutionDetails {
  executionId: string;
  workflowId: string;
  workflowName: string;
  startedAt: string;
  duration: number;
  status: 'success' | 'error' | 'running';
  steps: AgentStep[];
  businessContext: {
    senderEmail?: string;
    orderId?: string;
    subject?: string;
    classification?: string;
    confidence?: number;
  };
  quickActions: {
    crmUrl?: string;
    replyAction?: string;
  };
  rawData?: any;
}

interface AgentDetailModalProps {
  workflowId: string;
  tenantId: string;
  isOpen: boolean;
  onClose: () => void;
}

const AgentDetailModal: React.FC<AgentDetailModalProps> = ({ 
  workflowId, 
  tenantId, 
  isOpen, 
  onClose 
}) => {
  const [activeTab, setActiveTab] = useState<'timeline' | 'context' | 'raw'>('timeline');
  const [expandedStep, setExpandedStep] = useState<string | null>(null);
  // Rimosso toggle - mostra sempre solo i nodi "show" per client view
  
  // React Query Client per invalidazione cache
  const queryClient = useQueryClient();

  // Utility per convertire dati JSON in descrizioni human-readable per EMAIL
  const humanizeStepData = (data: any, dataType: 'input' | 'output', nodeType?: string, nodeName?: string): string => {
    
    // LOGICA SPECIALE PER TRIGGER NODES
    const isTriggerNode = nodeType?.includes('trigger') || 
                         nodeType?.includes('Trigger') ||
                         nodeName?.toLowerCase().includes('ricezione') ||
                         nodeName?.toLowerCase().includes('trigger');
    
    // Per nodi trigger, l'input è sempre "In attesa di dati"
    if (isTriggerNode && dataType === 'input') {
      return 'In attesa di nuove email dal server Microsoft Outlook';
    }
    
    if (!data) return 'Nessun dato disponibile';

    // Se è un array, prendi il primo elemento
    const processData = Array.isArray(data) ? data[0] : data;
    
    if (!processData || typeof processData !== 'object') {
      return String(processData) || 'Dato non strutturato';
    }

    const dataString = JSON.stringify(processData);
    const insights: string[] = [];
    
    // PRIORITÀ 1: CONTENUTO EMAIL (corpo del messaggio)
    const emailBodyFields = [
      processData.json?.messaggio_cliente,
      processData.json?.messaggio,
      processData.json?.body?.content,
      processData.json?.body,
      processData.json?.content,
      processData.json?.text,
      processData.json?.message,
      processData.body?.content,
      processData.content
    ];
    
    const emailBody = emailBodyFields.find(field => 
      field && typeof field === 'string' && field.length > 20
    );
    
    if (emailBody) {
      // Pulisci il contenuto HTML/formato e mostra preview
      const cleanContent = emailBody
        .replace(/<[^>]+>/g, ' ')  // Rimuovi HTML
        .replace(/&[a-zA-Z0-9]+;/g, ' ')  // Rimuovi entità HTML
        .replace(/\s+/g, ' ')  // Normalizza spazi
        .trim();
        
      const preview = cleanContent.substring(0, 200);
      insights.push(`Contenuto email: "${preview}${preview.length >= 200 ? '...' : ''}"`);
    }

    // PRIORITÀ 2: SUBJECT/OGGETTO
    if (processData.json?.oggetto) {
      insights.push(`Oggetto: "${processData.json.oggetto}"`);
    } else if (processData.json?.subject) {
      insights.push(`Subject: "${processData.json.subject}"`);
    }

    // PRIORITÀ 3: MITTENTE
    const senderFields = [
      processData.json?.mittente,
      processData.json?.mittente_nome,
      processData.json?.sender?.emailAddress?.address,
      processData.sender?.emailAddress?.address
    ];
    
    const sender = senderFields.find(field => field);
    if (sender) {
      insights.push(`Mittente: ${sender}`);
    }

    // PRIORITÀ 4: RISPOSTA AI (se presente)
    const aiResponseFields = [
      processData.json?.risposta_html,
      processData.json?.ai_response,
      processData.json?.response
    ];
    
    const aiResponse = aiResponseFields.find(field => 
      field && typeof field === 'string' && field.length > 20
    );
    
    if (aiResponse) {
      const cleanResponse = aiResponse
        .replace(/<[^>]+>/g, ' ')
        .replace(/&[a-zA-Z0-9]+;/g, ' ')
        .replace(/\s+/g, ' ')
        .trim();
      const preview = cleanResponse.substring(0, 150);
      insights.push(`Risposta AI: "${preview}${preview.length >= 150 ? '...' : ''}"`);
    }

    // PRIORITÀ 5: CLASSIFICAZIONE/CATEGORIA (se utile)
    if (processData.json?.categoria && processData.json?.confidence) {
      insights.push(`Classificazione: ${processData.json.categoria} (${processData.json.confidence}% confidence)`);
    }

    // PRIORITÀ 6: ORDER ID (se specifico)
    if (processData.json?.order_id && processData.json.order_id !== '000000') {
      insights.push(`Ordine: ${processData.json.order_id}`);
    }

    // FALLBACK: Se non troviamo contenuti email, mostra dati generici
    if (insights.length === 0) {
      // Cerca almeno email e subject base
      const emailRegex = /[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/g;
      const emails = dataString.match(emailRegex);
      if (emails && emails.length > 0) {
        insights.push(`Email rilevata: ${emails[0]}`);
      }
      
      // Mostra le chiavi principali come fallback
      const keys = Object.keys(processData.json || processData);
      if (keys.length > 0) {
        insights.push(`Campi disponibili: ${keys.slice(0, 4).join(', ')}${keys.length > 4 ? '...' : ''}`);
      } else {
        return 'Dati complessi - espandi per visualizzare dettagli completi';
      }
    }

    return insights.join('\n');
  };

  // SISTEMA CACHE ROBUSTO: Fetch workflow timeline con smart refresh
  const { data: timelineData, isLoading, error, refetch } = useQuery({
    queryKey: ['agent-workflow-timeline', tenantId, workflowId],
    queryFn: async () => {
      const response = await tenantAPI.agents.timeline(tenantId, workflowId);
      console.log('📡 API Response:', response);
      // response è già axios response, che ha response.data
      return response.data.data; // response.data è il body, response.data.data è il contenuto
    },
    enabled: isOpen, // Solo quando modal è aperto
    refetchInterval: 300000, // 🚀 POLLING INTENSIVO: Auto-refresh ogni 5 minuti per esecuzioni recenti
    staleTime: 0, // 🔥 SEMPRE FRESH: Nessuna cache stale per massima reattività
    refetchOnMount: true, // Sempre refresh quando modal si apre
    refetchOnWindowFocus: true, // 👁️ FOCUS REFRESH: Refresh quando torni al modal
  });

  // FORCE REFRESH: Mutation per forzare sync da n8n API
  const refreshMutation = useMutation({
    mutationFn: async () => {
      const response = await tenantAPI.agents.refresh(tenantId, workflowId);
      return response.data;
    },
    onSuccess: async () => {
      // Invalida cache e ricarica dati fresh
      queryClient.invalidateQueries({ queryKey: ['agent-workflow-timeline', tenantId, workflowId] });
      queryClient.invalidateQueries({ queryKey: ['workflow-cards'] }); // Invalida anche lista workflow
      queryClient.invalidateQueries({ queryKey: ['agents-workflows', tenantId] }); // 🔥 CRITICAL FIX: Invalida cache AgentsPage
      
      // 🚀 BRUTAL FORCE: Chiama timeline API direttamente con forceRefresh=true 
      try {
        console.log('🔥 FORCE REFRESH: Calling timeline API with forceRefresh=true');
        const freshResponse = await tenantAPI.agents.timeline(tenantId, workflowId, true);
        
        // Aggiorna la cache con i dati fresh
        queryClient.setQueryData(['agent-workflow-timeline', tenantId, workflowId], freshResponse);
        console.log('✅ Fresh timeline data loaded and cached');
      } catch (error) {
        console.error('❌ Failed to fetch fresh timeline:', error);
        // Fallback al normale refetch
        refetch();
      }
      
      console.log('✅ Workflow cache refreshed successfully - timeline loaded with forceRefresh=true');
    },
    onError: (error) => {
      console.error('❌ Failed to refresh workflow cache:', error);
    }
  });

  const handleForceRefresh = () => {
    console.log(`🔄 Force refreshing workflow ${workflowId} for tenant ${tenantId}`);
    console.log('🔧 Mutation status:', refreshMutation.status);
    refreshMutation.mutate();
  };

  // Ora timeline contiene l'intero oggetto response.data dal backend
  const timeline = timelineData;
  
  // Debug: vediamo cosa contiene timeline
  console.log('🔍 DEBUG timeline object:', timeline);
  console.log('🔍 DEBUG timeline keys:', timeline ? Object.keys(timeline) : 'null');
  console.log('🔍 DEBUG timeline.timeline:', timeline?.timeline);

  const formatDuration = (ms: number) => {
    if (ms < 1000) return `${ms}ms`;
    if (ms < 60000) return `${(ms / 1000).toFixed(1)}s`;
    return `${(ms / 60000).toFixed(1)}min`;
  };

  const formatTimestamp = (timestamp: string) => {
    return new Date(timestamp).toLocaleString('it-IT', {
      dateStyle: 'short',
      timeStyle: 'medium'
    });
  };

  const getStepIcon = (type: string) => {
    switch (type) {
      case 'input': return <Database className="w-4 h-4 text-blue-400" />;
      case 'processing': return <Settings className="w-4 h-4 text-yellow-400 animate-spin" />;
      case 'output': return <CheckCircle className="w-4 h-4 text-green-400" />;
      case 'error': return <XCircle className="w-4 h-4 text-red-400" />;
      default: return <Activity className="w-4 h-4 text-gray-400" />;
    }
  };

  const getStepColor = (type: string) => {
    switch (type) {
      case 'input': return 'border-blue-400/30 bg-blue-400/5';
      case 'processing': return 'border-yellow-400/30 bg-yellow-400/5';
      case 'output': return 'border-green-400/30 bg-green-400/5';
      case 'error': return 'border-red-400/30 bg-red-400/5';
      default: return 'border-gray-400/30 bg-gray-400/5';
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 border border-green-400/20 rounded-lg w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-800">
          <div className="flex items-center">
            <Bot className="w-6 h-6 text-green-400 mr-3" />
            <div>
              <h2 className="text-xl font-semibold text-white">
                {timeline ? timeline.workflowName : 'Loading...'}
              </h2>
              <p className="text-gray-400 text-sm">
                Workflow ID: {workflowId}
                {timeline?.lastExecution && (
                  <span className="ml-3">
                    • Last execution: {timeline?.lastExecution?.id || 'None'}
                  </span>
                )}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            {/* Force Refresh Button - MIGLIORATO */}
            <button
              onClick={handleForceRefresh}
              disabled={refreshMutation.isPending}
              className={`flex items-center px-4 py-2 rounded-lg font-medium transition-all ${
                refreshMutation.isPending 
                  ? 'bg-gray-700 text-gray-400 cursor-not-allowed' 
                  : 'bg-green-600 hover:bg-green-500 text-white shadow-lg hover:shadow-green-500/25'
              }`}
              title="Force refresh latest executions from n8n"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${refreshMutation.isPending ? 'animate-spin' : ''}`} />
              {refreshMutation.isPending ? 'Refreshing...' : 'Force Refresh'}
            </button>
            
            <button
              onClick={onClose}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Loading State */}
        {isLoading && (
          <div className="flex-1 flex items-center justify-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-400"></div>
            <span className="ml-3 text-green-400">Loading execution details...</span>
          </div>
        )}

        {/* Error State */}
        {error && (
          <div className="flex-1 flex items-center justify-center text-red-400">
            <AlertTriangle className="w-6 h-6 mr-2" />
            Failed to load execution details
          </div>
        )}

        {/* Content */}
        {timeline && (
          <>
            {/* Tabs */}
            <div className="flex border-b border-gray-800">
              <button
                onClick={() => setActiveTab('timeline')}
                className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'timeline'
                    ? 'border-green-400 text-green-400'
                    : 'border-transparent text-gray-400 hover:text-white'
                }`}
              >
                Timeline
              </button>
              <button
                onClick={() => setActiveTab('context')}
                className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'context'
                    ? 'border-green-400 text-green-400'
                    : 'border-transparent text-gray-400 hover:text-white'
                }`}
              >
                Business Context
              </button>
              <button
                onClick={() => setActiveTab('raw')}
                className={`px-6 py-3 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === 'raw'
                    ? 'border-green-400 text-green-400'
                    : 'border-transparent text-gray-400 hover:text-white'
                }`}
              >
                Raw Data
              </button>
            </div>

            {/* Tab Content */}
            <div className="flex-1 overflow-y-auto p-6">
              {/* Timeline Tab */}
              {activeTab === 'timeline' && (
                <div>
                  <div className="mb-6 p-4 bg-black rounded-lg border border-gray-800">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-white font-medium">Workflow Summary</span>
                      <div className="flex items-center">
                        {timeline?.status === 'active' ? (
                          <CheckCircle className="w-5 h-5 text-green-400 mr-2" />
                        ) : (
                          <XCircle className="w-5 h-5 text-red-400 mr-2" />
                        )}
                        <span className={timeline?.status === 'active' ? 'text-green-400' : 'text-red-400'}>
                          {timeline?.status?.toUpperCase() || 'UNKNOWN'}
                        </span>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <span className="text-gray-400">Last Execution:</span>
                        <span className="text-white ml-2">
                          {timeline?.lastExecution ? formatTimestamp(timeline.lastExecution.executedAt) : 'No executions'}
                        </span>
                      </div>
                      <div>
                        <span className="text-gray-400">Duration:</span>
                        <span className="text-white ml-2">
                          {timeline?.lastExecution ? formatDuration(timeline.lastExecution.duration) : 'N/A'}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Info header per timeline con freshness indicator */}
                  <div className="mb-4 flex items-center justify-between">
                    <div className="text-sm text-gray-400">
                      Showing workflow steps marked with "show" annotations
                    </div>
                    <div className="flex items-center text-xs text-gray-500">
                      <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse mr-2"></div>
                      Auto-refresh: 5 min | Last check: {new Date().toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}
                    </div>
                  </div>

                  {(() => {
                    // Mostra sempre solo i nodi marcati con "show" (client view)
                    const stepsToShow = timeline?.timeline || [];
                    
                    if (stepsToShow.length === 0) {
                      return (
                        <div className="text-center py-8 text-gray-400">
                          <Info className="w-8 h-8 mx-auto mb-2" />
                          <p>No workflow steps available</p>
                          <p className="text-sm">
                            Steps will appear here when workflow executions contain nodes marked with "show-N" in their notes.
                          </p>
                        </div>
                      );
                    }
                    
                    return (
                      <div className="space-y-4">
                        {stepsToShow.map((step, index) => (
                        <div 
                          key={step.nodeId}
                          className={`border rounded-lg p-4 ${getStepColor(step.type)}`}
                        >
                          <div 
                            className="flex items-center justify-between cursor-pointer"
                            onClick={() => setExpandedStep(expandedStep === step.nodeId ? null : step.nodeId)}
                          >
                            <div className="flex items-center">
                              {getStepIcon(step.type)}
                              <div className="ml-3">
                                <div className="font-medium text-white">{step.nodeName}</div>
                                <div className="text-sm text-gray-400">{step.summary}</div>
                              </div>
                            </div>
                            <div className="flex items-center">
                              <span className="text-xs text-gray-400 mr-3">
                                {formatDuration(step.executionTime || 0)}
                              </span>
                              {expandedStep === step.nodeId ? (
                                <ChevronDown className="w-4 h-4 text-gray-400" />
                              ) : (
                                <ChevronRight className="w-4 h-4 text-gray-400" />
                              )}
                            </div>
                          </div>

                          {expandedStep === step.nodeId && (
                            <div className="mt-4 pt-4 border-t border-gray-700">
                              {step.details && (
                                <div className="mb-4">
                                  <div className="text-sm font-medium text-white mb-2">Details:</div>
                                  <div className="text-sm text-gray-300">{step.details}</div>
                                </div>
                              )}
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <div className="text-sm font-medium text-white mb-2">Input:</div>
                                  <div className="bg-gray-900 p-3 rounded text-sm text-gray-300 whitespace-pre-line">
                                    {humanizeStepData(step.inputData, 'input', step.nodeType, step.nodeName)}
                                  </div>
                                  <details className="mt-2">
                                    <summary className="text-xs text-gray-500 cursor-pointer hover:text-gray-400">
                                      Mostra dati tecnici
                                    </summary>
                                    <pre className="bg-gray-800 p-2 rounded text-xs text-gray-400 overflow-x-auto mt-2">
                                      {JSON.stringify(step.inputData, null, 2)}
                                    </pre>
                                  </details>
                                </div>
                                <div>
                                  <div className="text-sm font-medium text-white mb-2">Output:</div>
                                  <div className="bg-gray-900 p-3 rounded text-sm text-gray-300 whitespace-pre-line">
                                    {humanizeStepData(step.outputData, 'output', step.nodeType, step.nodeName)}
                                  </div>
                                  <details className="mt-2">
                                    <summary className="text-xs text-gray-500 cursor-pointer hover:text-gray-400">
                                      Mostra dati tecnici
                                    </summary>
                                    <pre className="bg-gray-800 p-2 rounded text-xs text-gray-400 overflow-x-auto mt-2">
                                      {JSON.stringify(step.outputData, null, 2)}
                                    </pre>
                                  </details>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      ))}
                      </div>
                    );
                  })()}
                </div>
              )}

              {/* Business Context Tab */}
              {activeTab === 'context' && (
                <div className="space-y-6">
                  <div className="p-4 bg-black rounded-lg border border-gray-800">
                    <h3 className="text-lg font-medium text-white mb-4">Business Context</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {timeline.businessContext?.senderEmail && (
                        <div className="flex items-center">
                          <Mail className="w-4 h-4 text-blue-400 mr-2" />
                          <span className="text-gray-400">Sender:</span>
                          <span className="text-blue-400 ml-2">{timeline.businessContext.senderEmail}</span>
                        </div>
                      )}
                      
                      {timeline.businessContext?.orderId && (
                        <div className="flex items-center">
                          <Database className="w-4 h-4 text-green-400 mr-2" />
                          <span className="text-gray-400">Order ID:</span>
                          <span className="text-white ml-2">{timeline.businessContext.orderId}</span>
                        </div>
                      )}
                      
                      {timeline.businessContext?.subject && (
                        <div className="flex items-center">
                          <Info className="w-4 h-4 text-yellow-400 mr-2" />
                          <span className="text-gray-400">Subject:</span>
                          <span className="text-white ml-2">{timeline.businessContext.subject}</span>
                        </div>
                      )}
                      
                      {timeline.businessContext?.classification && (
                        <div className="flex items-center">
                          <Activity className="w-4 h-4 text-purple-400 mr-2" />
                          <span className="text-gray-400">Classification:</span>
                          <span className="text-purple-400 ml-2">
                            {timeline.businessContext.classification}
                            {timeline.businessContext.confidence && (
                              <span className="text-gray-400 ml-1">({timeline.businessContext.confidence}%)</span>
                            )}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Quick Actions */}
                  {timeline.businessContext?.senderEmail && (
                    <div className="p-4 bg-black rounded-lg border border-gray-800">
                      <h3 className="text-lg font-medium text-white mb-4">Quick Actions</h3>
                      <div className="flex space-x-4">
                        <button
                          onClick={() => window.open(`mailto:${timeline.businessContext.senderEmail}?subject=Re: ${timeline.businessContext.subject || ''}`, '_blank')}
                          className="flex items-center px-4 py-2 bg-blue-400 text-black rounded hover:bg-blue-300 transition-colors"
                        >
                          <Mail className="w-4 h-4 mr-2" />
                          Reply to Customer
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Raw Data Tab */}
              {activeTab === 'raw' && (
                <div>
                  <div className="flex items-center mb-4">
                    <Code className="w-5 h-5 text-gray-400 mr-2" />
                    <h3 className="text-lg font-medium text-white">Raw Timeline Data</h3>
                  </div>
                  
                  <pre className="bg-black p-4 rounded-lg border border-gray-800 text-xs text-gray-300 overflow-auto max-h-96">
                    {JSON.stringify(timeline, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default AgentDetailModal;