{"version":3,"file":"api-client-kiOOfUtV.js","sources":["../../src/services/api-client.ts"],"sourcesContent":["// ðŸš€ BATTLE-TESTED: OFETCH HTTP Client - Zero dependency overhead\n// Following REGOLA FERREA: Battle-tested libraries FIRST, custom code LAST RESORT\n// OFETCH benefits: -87% bundle size, +20% velocity, built-in retry/timeout\n\nimport { ofetch } from 'ofetch'\nimport type { DashboardData, Workflow, Execution } from '../types'\nimport { API_BASE_URL } from '../utils/api-config'\n\n// OFETCH: Modern fetch wrapper with intelligent defaults\n// Use environment variable for API URL, fallback to config for development\nconst baseFetch = ofetch.create({\n  baseURL: import.meta.env.VITE_API_URL || API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  // NO credentials: 'include' - we use JWT Bearer tokens now!\n  // Token is automatically added by auth store's fetch interceptor\n  onRequest({ options }) {\n    // Get token from localStorage if available\n    const token = localStorage.getItem('token')\n    if (token) {\n      options.headers = {\n        ...options.headers,\n        'Authorization': `Bearer ${token}`\n      }\n    }\n  }\n})\n\n// Auth API - Clean OFETCH implementation\nexport const authAPI = {\n  login: (email: string, password: string) =>\n    baseFetch('/api/auth/login', { \n      method: 'POST', \n      body: { email, password }\n    }),\n  \n  logout: () => baseFetch('/api/auth/logout', { method: 'POST' }),\n  \n  getProfile: () => baseFetch('/api/auth/profile'),\n}\n\n// Business API - OFETCH battle-tested implementation\nexport const businessAPI = {\n  // Insights data\n  getInsights: (): Promise<DashboardData> =>\n    baseFetch('/api/business/dashboard'),\n  \n  // Business processes (workflows with business terminology)  \n  getProcesses: (params?: any) =>\n    baseFetch('/api/business/processes', { query: params }),\n  \n  // Process executions (executions with business terminology)\n  getProcessExecutions: (params?: any) =>\n    baseFetch('/api/business/executions', { query: params }),\n  \n  // Process executions for specific workflow\n  getProcessExecutionsForWorkflow: (workflowId: string) =>\n    baseFetch(`/api/business/process-executions/${workflowId}`),\n  \n  // Process runs (executions)\n  getProcessRuns: (params?: any) =>\n    baseFetch('/api/business/process-runs', { query: params }),\n  \n  // Analytics data for Dashboard and Insights\n  getAnalytics: (params?: any) =>\n    baseFetch('/api/business/analytics', { query: params }),\n    \n  // Automation insights  \n  getAutomationInsights: () =>\n    baseFetch('/api/business/automation-insights'),\n    \n  // Statistics\n  getStatistics: () =>\n    baseFetch('/api/business/statistics'),\n    \n  // Integration health\n  getIntegrationHealth: () =>\n    baseFetch('/api/business/integration-health'),\n  \n  // Workflow operations - NEW unified endpoints\n  executeWorkflow: (workflowId: string) =>\n    baseFetch(`/api/business/execute-workflow/${workflowId}`, {\n      method: 'POST'\n    }),\n  \n  stopWorkflow: (workflowId: string) =>\n    baseFetch(`/api/business/stop-workflow/${workflowId}`, {\n      method: 'POST'\n    }),\n  \n  toggleWorkflow: (workflowId: string, active: boolean) =>\n    baseFetch(`/api/business/toggle-workflow/${workflowId}`, {\n      method: 'POST',\n      body: JSON.stringify({ active })\n    }),\n  \n  // Check execution status\n  getExecutionStatus: (executionId: string) =>\n    baseFetch(`/api/business/execution-status/${executionId}`),\n    \n  // Get workflow details for modal\n  getWorkflowDetails: (workflowId: string) =>\n    baseFetch(`/api/business/raw-data-for-modal/${workflowId}`),\n  \n  // Force refresh process\n  refreshProcess: (workflowId: string) =>\n    baseFetch(`/api/business/process-refresh/${workflowId}`, {\n      method: 'POST'\n    }),\n  \n  // Get process details\n  getProcessDetails: (workflowId: string) =>\n    baseFetch(`/api/business/process-details/${workflowId}`),\n  \n  // System health\n  getHealth: () => baseFetch('/health'),\n  \n  // Compatibility info\n  getCompatibility: () => baseFetch('/api/system/compatibility'),\n  \n  // Top performing workflows\n  getTopPerformers: () => baseFetch('/api/business/top-performers'),\n  \n  // Hourly analytics with real distribution\n  getHourlyAnalytics: () => baseFetch('/api/business/hourly-analytics'),\n  \n  // Daily trend for 30 days with real data\n  getDailyTrend: () => baseFetch('/api/business/daily-trend'),\n  \n  // Live events from recent executions\n  getLiveEvents: () => baseFetch('/api/business/live-events'),\n}\n\n// Tenant API - Same interface as Axios version\nexport const tenantAPI = {\n  dashboard: (tenantId: string) =>\n    baseFetch(`/api/tenant/${tenantId}/dashboard`),\n\n  workflows: (tenantId: string) =>\n    baseFetch(`/api/tenant/${tenantId}/workflows`),\n\n  executions: (tenantId: string, params?: any) =>\n    baseFetch(`/api/tenant/${tenantId}/executions`, { query: params }),\n\n  stats: (tenantId: string) =>\n    baseFetch(`/api/tenant/${tenantId}/stats`),\n}\n\n// Generic API client for custom endpoints (like Milhena)\nexport const apiClient = {\n  get: (url: string) => baseFetch(url),\n  post: (url: string, body?: any) => baseFetch(url, { method: 'POST', body }),\n  put: (url: string, body?: any) => baseFetch(url, { method: 'PUT', body }),\n  delete: (url: string) => baseFetch(url, { method: 'DELETE' }),\n}\n\n// Default export for compatibility\nexport default apiClient\n\n// Security API - Same interface as Axios version\nexport const securityAPI = {\n  getLogs: (params?: any) => baseFetch('/api/security/logs', { query: params }),\n  getMetrics: () => baseFetch('/api/security/metrics'),\n  getApiKeys: () => baseFetch('/api/security/api-keys'),\n}\n\n// Database API - Same interface as Axios version\nexport const databaseAPI = {\n  getStats: () => baseFetch('/api/database/stats'),\n  getTables: () => baseFetch('/api/database/tables'),\n  getActivity: () => baseFetch('/api/database/activity'),\n}\n\n// Scheduler API - Same interface as Axios version\nexport const schedulerAPI = {\n  getStatus: () => baseFetch('/api/scheduler/status'),\n  start: () => baseFetch('/api/scheduler/start', { method: 'POST' }),\n  stop: () => baseFetch('/api/scheduler/stop', { method: 'POST' }),\n  getLogs: () => baseFetch('/api/scheduler/logs'),\n}\n\n// AI Agents API - Same interface as Axios version\nexport const agentsAPI = {\n  getWorkflows: (tenantId: string) => \n    baseFetch(`/api/tenant/${tenantId}/agents/workflows`),\n  \n  getTimeline: (tenantId: string, workflowId: string) => \n    baseFetch(`/api/tenant/${tenantId}/agents/workflow/${workflowId}/timeline`),\n  \n  refresh: (tenantId: string, workflowId: string) => \n    baseFetch(`/api/tenant/${tenantId}/agents/workflow/${workflowId}/refresh`, {\n      method: 'POST'\n    }),\n}\n\n// Alerts API - Same interface as Axios version\nexport const alertsAPI = {\n  getAlerts: (params?: any) => baseFetch('/api/alerts', { query: params }),\n  markAsRead: (alertId: string) => baseFetch(`/api/alerts/${alertId}/read`, { \n    method: 'PUT' \n  }),\n  getMetrics: () => baseFetch('/api/alerts/metrics'),\n}\n\n// Export a simple fetch-style function for easy migration from raw fetch calls\nexport const $fetch = baseFetch"],"names":["baseFetch","ofetch","API_BASE_URL","options","token","businessAPI","params","workflowId","active","executionId","apiClient","url","body","$fetch"],"mappings":"iFAUA,MAAMA,EAAYC,EAAO,OAAO,CAC9B,QAAyCC,EACzC,QAAS,CACP,eAAgB,kBAAA,EAIlB,UAAU,CAAE,QAAAC,GAAW,CAErB,MAAMC,EAAQ,aAAa,QAAQ,OAAO,EACtCA,IACFD,EAAQ,QAAU,CAChB,GAAGA,EAAQ,QACX,cAAiB,UAAUC,CAAK,EAAA,EAGtC,CACF,CAAC,EAgBYC,EAAc,CAEzB,YAAa,IACXL,EAAU,yBAAyB,EAGrC,aAAeM,GACbN,EAAU,0BAA2B,CAAE,MAAOM,EAAQ,EAGxD,qBAAuBA,GACrBN,EAAU,2BAA4B,CAAE,MAAOM,EAAQ,EAGzD,gCAAkCC,GAChCP,EAAU,oCAAoCO,CAAU,EAAE,EAG5D,eAAiBD,GACfN,EAAU,6BAA8B,CAAE,MAAOM,EAAQ,EAG3D,aAAeA,GACbN,EAAU,0BAA2B,CAAE,MAAOM,EAAQ,EAGxD,sBAAuB,IACrBN,EAAU,mCAAmC,EAG/C,cAAe,IACbA,EAAU,0BAA0B,EAGtC,qBAAsB,IACpBA,EAAU,kCAAkC,EAG9C,gBAAkBO,GAChBP,EAAU,kCAAkCO,CAAU,GAAI,CACxD,OAAQ,MAAA,CACT,EAEH,aAAeA,GACbP,EAAU,+BAA+BO,CAAU,GAAI,CACrD,OAAQ,MAAA,CACT,EAEH,eAAgB,CAACA,EAAoBC,IACnCR,EAAU,iCAAiCO,CAAU,GAAI,CACvD,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,OAAAC,EAAQ,CAAA,CAChC,EAGH,mBAAqBC,GACnBT,EAAU,kCAAkCS,CAAW,EAAE,EAG3D,mBAAqBF,GACnBP,EAAU,oCAAoCO,CAAU,EAAE,EAG5D,eAAiBA,GACfP,EAAU,iCAAiCO,CAAU,GAAI,CACvD,OAAQ,MAAA,CACT,EAGH,kBAAoBA,GAClBP,EAAU,iCAAiCO,CAAU,EAAE,EAGzD,UAAW,IAAMP,EAAU,SAAS,EAGpC,iBAAkB,IAAMA,EAAU,2BAA2B,EAG7D,iBAAkB,IAAMA,EAAU,8BAA8B,EAGhE,mBAAoB,IAAMA,EAAU,gCAAgC,EAGpE,cAAe,IAAMA,EAAU,2BAA2B,EAG1D,cAAe,IAAMA,EAAU,2BAA2B,CAC5D,EAkBaU,EAAY,CACvB,IAAMC,GAAgBX,EAAUW,CAAG,EACnC,KAAM,CAACA,EAAaC,IAAeZ,EAAUW,EAAK,CAAE,OAAQ,OAAQ,KAAAC,EAAM,EAC1E,IAAK,CAACD,EAAaC,IAAeZ,EAAUW,EAAK,CAAE,OAAQ,MAAO,KAAAC,EAAM,EACxE,OAASD,GAAgBX,EAAUW,EAAK,CAAE,OAAQ,SAAU,CAC9D,EAmDaE,EAASb"}