{"version":3,"file":"auth-Ckyanyq3.js","sources":["../../src/stores/auth.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\nimport type { User } from '../types'\nimport { authAPI } from '../services/api-client'\n\nexport const useAuthStore = defineStore('auth', () => {\n  // State - same pattern as n8n stores\n  const user = ref<User | null>(null)\n  const token = ref<string | null>(localStorage.getItem('pilotpro_token'))\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n  const autoLogoutTimer = ref<NodeJS.Timeout | null>(null)\n\n  // Getters\n  const isAuthenticated = computed(() => !!token.value)\n  const tenantId = computed(() => user.value?.tenantId || 'client_simulation_a')\n\n  // Actions - HttpOnly cookies + real API\n  const login = async (email: string, password: string) => {\n    isLoading.value = true\n    error.value = null\n\n    try {\n      console.log('🌐 Making fetch to /api/auth/login...')\n      \n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n        credentials: 'include' // Include HttpOnly cookies\n      })\n\n      console.log('📡 Response received:', response.status, response.statusText)\n      \n      const data = await response.json()\n      console.log('📄 Response data:', data)\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed')\n      }\n\n      // HttpOnly cookies are set automatically by browser\n      user.value = {\n        id: data.user.id,\n        email: data.user.email,\n        name: data.user.email.split('@')[0], // Use email prefix as name\n        role: data.user.role,\n        tenantId: 'pilotpros_client',\n        createdAt: new Date().toISOString(),\n      }\n\n      // No token in localStorage - it's in HttpOnly cookies\n      token.value = 'authenticated' // Flag for UI state\n      \n      // Set auto-logout timer for 15 minutes (matching access token expiry)\n      setAutoLogoutTimer()\n      \n      console.log('✅ Login successful with HttpOnly cookies:', user.value)\n      \n    } catch (err: any) {\n      error.value = err.message || 'Login failed'\n      console.error('❌ Login failed:', err)\n      throw err\n    } finally {\n      isLoading.value = false\n    }\n  }\n\n  const logout = async () => {\n    console.log('🚪 Logout initiated...')\n    \n    // Clear timer first to prevent race conditions\n    clearAutoLogoutTimer()\n    \n    try {\n      // Call logout API to clear server-side session\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include' // Clear HttpOnly cookies\n      })\n      console.log('✅ Server logout successful')\n    } catch (error) {\n      console.error('❌ Logout API failed (continuing anyway):', error)\n    }\n\n    // Clear all client state immediately\n    user.value = null\n    token.value = null\n    error.value = null\n    localStorage.removeItem('pilotpro_token') // Legacy cleanup\n    \n    console.log('✅ Logout completed - all state cleared')\n  }\n\n  const initializeAuth = async () => {\n    // Clean up old localStorage token\n    localStorage.removeItem('pilotpro_token')\n    \n    // Check if user is already authenticated via HttpOnly cookies\n    try {\n      const response = await fetch('/api/auth/profile', {\n        credentials: 'include' // Send HttpOnly cookies\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        \n        user.value = {\n          id: data.user.id,\n          email: data.user.email,\n          name: data.user.email.split('@')[0],\n          role: data.user.role,\n          tenantId: 'pilotpros_client',\n          createdAt: data.user.createdAt,\n        }\n        \n        token.value = 'authenticated'\n        setAutoLogoutTimer() // Set timer if already authenticated\n        console.log('✅ Auth initialized from HttpOnly cookies:', user.value)\n      } else {\n        // Silent fail for 401 - user just not authenticated\n        console.log('ℹ️ No existing authentication found (expected)')\n      }\n    } catch (error) {\n      // Suppress network errors on auth init\n      console.log('ℹ️ Auth initialization skipped (no connection)')\n    }\n  }\n\n  // Auto-refresh token management (refresh before expiry)\n  const setAutoLogoutTimer = () => {\n    clearAutoLogoutTimer()\n    \n    // Set timer for 13 minutes to refresh token BEFORE it expires\n    autoLogoutTimer.value = setTimeout(async () => {\n      console.log('🔄 Auto-refresh: Refreshing token before expiry...')\n      \n      try {\n        // Call refresh endpoint to get new tokens\n        const response = await fetch('/api/auth/refresh', {\n          method: 'POST',\n          credentials: 'include' // Send refresh token cookie\n        })\n        \n        if (response.ok) {\n          console.log('✅ Token refreshed successfully!')\n          // Reset timer for another 13 minutes\n          setAutoLogoutTimer()\n        } else {\n          // Only logout if refresh fails (refresh token expired after 7 days)\n          console.log('❌ Token refresh failed, logging out')\n          await logout()\n          error.value = 'Sessione scaduta. Effettua nuovamente il login.'\n        }\n      } catch (err) {\n        console.error('❌ Error refreshing token:', err)\n        // Keep user logged in if network error - will retry on next API call\n        setAutoLogoutTimer() // Retry in another 13 minutes\n      }\n    }, 13 * 60 * 1000) // 13 minutes (refresh 2 minutes before expiry)\n  }\n\n  const clearAutoLogoutTimer = () => {\n    if (autoLogoutTimer.value) {\n      clearTimeout(autoLogoutTimer.value)\n      autoLogoutTimer.value = null\n    }\n  }\n\n  // Reset timer on user activity\n  const resetAutoLogoutTimer = () => {\n    if (isAuthenticated.value) {\n      setAutoLogoutTimer()\n    }\n  }\n\n  return {\n    // State\n    user,\n    token,\n    isLoading,\n    error,\n    \n    // Getters\n    isAuthenticated,\n    tenantId,\n    \n    // Actions\n    login,\n    logout,\n    initializeAuth,\n    resetAutoLogoutTimer,\n    clearAutoLogoutTimer,\n  }\n})"],"names":["useAuthStore","defineStore","user","ref","token","isLoading","error","autoLogoutTimer","isAuthenticated","computed","tenantId","login","email","password","response","data","setAutoLogoutTimer","err","logout","clearAutoLogoutTimer","initializeAuth"],"mappings":"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"}